// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using OrderPlacer.SamsClub.Models;
//
//    var samsAddressesDetailDto = SamsAddressesDetailDto.FromJson(jsonString);

namespace OrderPlacer.SamsClub.Models
{
    using System.Collections.Generic;
    using Newtonsoft.Json;

    public partial class SamsAddressesDetailDto
        {
            [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
            public string Status { get; set; }

            [JsonProperty("addresses", NullValueHandling = NullValueHandling.Ignore)]
            public List<SamsAddress> Addresses { get; set; }
        }

        public partial class SamsAddressesResponseDto
        {
            [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
            public string Status { get; set; }

            [JsonProperty("payload", NullValueHandling = NullValueHandling.Ignore)]
            public AddressPayload Payload { get; set; }
        }   

        public partial class AddressPayload
        {
            [JsonProperty("addresses", NullValueHandling = NullValueHandling.Ignore)]
            public List<SamsAddress> Addresses { get; set; }

            [JsonProperty("newAddressId", NullValueHandling = NullValueHandling.Ignore)]
            public string NewAddressId { get; set; }
        }

        public partial class SamsAddress
        {
            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            public string Id { get; set; }
            [JsonProperty("contactOrder", NullValueHandling = NullValueHandling.Ignore)]
            public string ContactOrder { get; set; }            
            [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
            public string Country { get; set; }

            [JsonProperty("isOkayToContact", NullValueHandling = NullValueHandling.Ignore)]
            public bool? IsOkayToContact { get; set; }

            [JsonProperty("addressType", NullValueHandling = NullValueHandling.Ignore)]
            public string AddressType { get; set; }

            [JsonProperty("inCityLimit", NullValueHandling = NullValueHandling.Ignore)]
            public bool? InCityLimit { get; set; }

            [JsonProperty("legacyAddressId", NullValueHandling = NullValueHandling.Ignore)]
            public string LegacyAddressId { get; set; }

            [JsonProperty("poBox", NullValueHandling = NullValueHandling.Ignore)]
            public bool? PoBox { get; set; }
        }

        public partial class SamsAddressesDetailDto
        {
            public static SamsAddressesDetailDto FromJson(string json) => JsonConvert.DeserializeObject<SamsAddressesDetailDto>(json, Converter.Settings);
        }
        public partial class SamsAddressesResponseDto
        {
            public static SamsAddressesResponseDto FromJson(string json) => JsonConvert.DeserializeObject<SamsAddressesResponseDto>(json, Converter.Settings);
        }



}


