// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ShipStationApi.Models;
//
//    var shipStationOrders = ShipStationOrders.FromJson(jsonString);

namespace ShipStationApi.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ShipStationOrders
    {
        [JsonProperty("orders", NullValueHandling = NullValueHandling.Ignore)]
        public List<Order> Orders { get; set; }

        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [JsonProperty("page", NullValueHandling = NullValueHandling.Ignore)]
        public long? Page { get; set; }

        [JsonProperty("pages", NullValueHandling = NullValueHandling.Ignore)]
        public long? Pages { get; set; }
    }

    public partial class Order
    {
        [JsonProperty("orderId", NullValueHandling = NullValueHandling.Ignore)]
        public long? OrderId { get; set; }

        [JsonProperty("orderNumber", NullValueHandling = NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        [JsonProperty("orderKey", NullValueHandling = NullValueHandling.Ignore)]
        public string OrderKey { get; set; }

        [JsonProperty("orderDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? OrderDate { get; set; }

        [JsonProperty("createDate", NullValueHandling = NullValueHandling.Ignore)]
        public string CreateDate { get; set; }

        [JsonProperty("modifyDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ModifyDate { get; set; }

        [JsonProperty("paymentDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PaymentDate { get; set; }

        [JsonProperty("shipByDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ShipByDate { get; set; }

        [JsonProperty("orderStatus", NullValueHandling = NullValueHandling.Ignore)]
        public string OrderStatus { get; set; }

        [JsonProperty("customerId")]
        public long? CustomerId { get; set; }

        [JsonProperty("customerUsername")]
        public string CustomerUsername { get; set; }

        [JsonProperty("customerEmail")]
        public string CustomerEmail { get; set; }

        [JsonProperty("billTo", NullValueHandling = NullValueHandling.Ignore)]
        public To BillTo { get; set; }

        [JsonProperty("shipTo", NullValueHandling = NullValueHandling.Ignore)]
        public To ShipTo { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<Item> Items { get; set; }

        [JsonProperty("orderTotal", NullValueHandling = NullValueHandling.Ignore)]
        public double? OrderTotal { get; set; }

        [JsonProperty("amountPaid", NullValueHandling = NullValueHandling.Ignore)]
        public double? AmountPaid { get; set; }

        [JsonProperty("taxAmount", NullValueHandling = NullValueHandling.Ignore)]
        public long? TaxAmount { get; set; }

        [JsonProperty("shippingAmount", NullValueHandling = NullValueHandling.Ignore)]
        public double? ShippingAmount { get; set; }

        [JsonProperty("customerNotes")]
        public object CustomerNotes { get; set; }

        [JsonProperty("internalNotes")]
        public string InternalNotes { get; set; }

        [JsonProperty("gift", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Gift { get; set; }

        [JsonProperty("giftMessage")]
        public object GiftMessage { get; set; }

        [JsonProperty("paymentMethod")]
        public string PaymentMethod { get; set; }

        [JsonProperty("requestedShippingService", NullValueHandling = NullValueHandling.Ignore)]
        public string RequestedShippingService { get; set; }

        [JsonProperty("carrierCode")]
        public string CarrierCode { get; set; }

        [JsonProperty("serviceCode")]
        public string ServiceCode { get; set; }

        [JsonProperty("packageCode")]
        public string PackageCode { get; set; }

        [JsonProperty("confirmation", NullValueHandling = NullValueHandling.Ignore)]
        public string Confirmation { get; set; }

        [JsonProperty("shipDate")]
        public DateTimeOffset? ShipDate { get; set; }

        [JsonProperty("holdUntilDate")]
        public object HoldUntilDate { get; set; }

        [JsonProperty("weight", NullValueHandling = NullValueHandling.Ignore)]
        public Weight Weight { get; set; }

        [JsonProperty("dimensions")]
        public Dimensions Dimensions { get; set; }

        [JsonProperty("insuranceOptions", NullValueHandling = NullValueHandling.Ignore)]
        public InsuranceOptions InsuranceOptions { get; set; }

        [JsonProperty("internationalOptions", NullValueHandling = NullValueHandling.Ignore)]
        public InternationalOptions InternationalOptions { get; set; }

        [JsonProperty("advancedOptions", NullValueHandling = NullValueHandling.Ignore)]
        public AdvancedOptions AdvancedOptions { get; set; }

        [JsonProperty("tagIds")]
        public List<string> TagIds { get; set; }

        [JsonProperty("userId")]
        public object UserId { get; set; }

        [JsonProperty("externallyFulfilled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ExternallyFulfilled { get; set; }

        [JsonProperty("externallyFulfilledBy")]
        public object ExternallyFulfilledBy { get; set; }

        [JsonProperty("labelMessages")]
        public object LabelMessages { get; set; }
    }

    public partial class AdvancedOptions
    {
        [JsonProperty("warehouseId", NullValueHandling = NullValueHandling.Ignore)]
        public long? WarehouseId { get; set; }

        [JsonProperty("nonMachinable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NonMachinable { get; set; }

        [JsonProperty("saturdayDelivery", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SaturdayDelivery { get; set; }

        [JsonProperty("containsAlcohol", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ContainsAlcohol { get; set; }

        [JsonProperty("mergedOrSplit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MergedOrSplit { get; set; }

        [JsonProperty("mergedIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> MergedIds { get; set; }

        [JsonProperty("parentId")]
        public object ParentId { get; set; }

        [JsonProperty("storeId", NullValueHandling = NullValueHandling.Ignore)]
        public long? StoreId { get; set; }

        [JsonProperty("customField1")]
        public object CustomField1 { get; set; }

        [JsonProperty("customField2")]
        public object CustomField2 { get; set; }

        [JsonProperty("customField3")]
        public object CustomField3 { get; set; }

        [JsonProperty("source")]
        public object Source { get; set; }

        [JsonProperty("billToParty")]
        public object BillToParty { get; set; }

        [JsonProperty("billToAccount")]
        public object BillToAccount { get; set; }

        [JsonProperty("billToPostalCode")]
        public object BillToPostalCode { get; set; }

        [JsonProperty("billToCountryCode")]
        public object BillToCountryCode { get; set; }

        [JsonProperty("billToMyOtherAccount")]
        public object BillToMyOtherAccount { get; set; }
    }

    public partial class To
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("company")]
        public string Company { get; set; }

        [JsonProperty("street1")]
        public string Street1 { get; set; }

        [JsonProperty("street2")]
        public string Street2 { get; set; }

        [JsonProperty("street3")]
        public string Street3 { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("postalCode")]
        public string PostalCode { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("phone")]
        public string Phone { get; set; }

        [JsonProperty("residential")]
        public bool? Residential { get; set; }

        [JsonProperty("addressVerified")]
        public string AddressVerified { get; set; }
    }

    public partial class Dimensions
    {
        [JsonProperty("units", NullValueHandling = NullValueHandling.Ignore)]
        public string Units { get; set; }

        [JsonProperty("length", NullValueHandling = NullValueHandling.Ignore)]
        public long? Length { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public long? Width { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public long? Height { get; set; }
    }

    public partial class InsuranceOptions
    {
        [JsonProperty("provider")]
        public object Provider { get; set; }

        [JsonProperty("insureShipment", NullValueHandling = NullValueHandling.Ignore)]
        public bool? InsureShipment { get; set; }

        [JsonProperty("insuredValue", NullValueHandling = NullValueHandling.Ignore)]
        public long? InsuredValue { get; set; }
    }

    public partial class InternationalOptions
    {
        [JsonProperty("contents")]
        public object Contents { get; set; }

        [JsonProperty("customsItems")]
        public object CustomsItems { get; set; }

        [JsonProperty("nonDelivery")]
        public object NonDelivery { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("orderItemId", NullValueHandling = NullValueHandling.Ignore)]
        public string OrderItemId { get; set; }

        [JsonProperty("lineItemKey", NullValueHandling = NullValueHandling.Ignore)]
        public string LineItemKey { get; set; }

        [JsonProperty("sku", NullValueHandling = NullValueHandling.Ignore)]
        public string Sku { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("imageUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ImageUrl { get; set; }

        [JsonProperty("weight")]
        public Weight Weight { get; set; }

        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Quantity { get; set; }

        [JsonProperty("unitPrice", NullValueHandling = NullValueHandling.Ignore)]
        public double? UnitPrice { get; set; }

        [JsonProperty("taxAmount", NullValueHandling = NullValueHandling.Ignore)]
        public long? TaxAmount { get; set; }

        [JsonProperty("shippingAmount", NullValueHandling = NullValueHandling.Ignore)]
        public double? ShippingAmount { get; set; }

        [JsonProperty("warehouseLocation")]
        public object WarehouseLocation { get; set; }

        [JsonProperty("options", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Options { get; set; }

        [JsonProperty("productId", NullValueHandling = NullValueHandling.Ignore)]
        public long? ProductId { get; set; }

        [JsonProperty("fulfillmentSku")]
        public string FulfillmentSku { get; set; }

        [JsonProperty("adjustment", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Adjustment { get; set; }

        [JsonProperty("upc")]
        public object Upc { get; set; }

        [JsonProperty("createDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreateDate { get; set; }

        [JsonProperty("modifyDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ModifyDate { get; set; }
    }

    public partial class Weight
    {
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }

        [JsonProperty("units", NullValueHandling = NullValueHandling.Ignore)]
        public string Units { get; set; }

        [JsonProperty("WeightUnits", NullValueHandling = NullValueHandling.Ignore)]
        public long? WeightUnits { get; set; }
    }

    public partial class ShipStationOrders
    {
        public static ShipStationOrders FromJson(string json) => JsonConvert.DeserializeObject<ShipStationOrders>(json, ShipStationApi.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ShipStationOrders self) => JsonConvert.SerializeObject(self, ShipStationApi.Models.Converter.Settings);
    }



    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
